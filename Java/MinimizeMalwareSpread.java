/**
 * Created on 14 Dec 2018 by happygirlzt
 *
 * LeetCode #924. Minimize Malware Spread
 *
 */

class Solution {
    class DSU {
       int[] roots;
       int[] counts;

       public DSU(int n) {
           counts = new int[n];
           roots = new int[n];
           Arrays.fill(counts, 1);
           for (int i = 0; i < n; i++) {
               roots[i] = i;
           }
       }

       public int find(int i) {
           if (roots[i] != i) {
               roots[i] = find(roots[i]);
           }

           return roots[i];
       }

       public void union(int x, int y) {
           int rx = find(x), ry = find(y);
           if (rx == ry) return;
           roots[ry] = rx;
           counts[rx] += counts[ry];
       }

       public int size(int i) {
           // remember to find its root
            return counts[find(i)];
        }
    }

    public int minMalwareSpread(int[][] graph, int[] initial) {
        if (graph == null || graph.length == 0) return 0;
         int n = graph.length;

         DSU dsu = new DSU(n);
         for (int i = 0; i < n; i++) {
             for (int j = 0; j < n; j++) {
                 if (graph[i][j] == 1) {
                      dsu.union(i, j);
                  }
              }
         }

         Arrays.sort(initial);

         Map<Integer, Integer> map = new HashMap<>();
        // save the total number of infected points in each set
        for (int i : initial) {
             int root = dsu.find(i);
             map.put(root, map.getOrDefault(root, 0) + 1);
        }

        // compare the size of the set
        int res = -1, maxSize = -1;
        for (int i : initial) {
            int root = dsu.find(i);
            int size = 0;
            //System.out.println(size);
            // there is only one infected point
            if (map.get(root) == 1) {
                size = dsu.size(root);
               // System.out.println("Hello");
            }

            if (size > maxSize) {
                res = i;
                maxSize = size;
                //System.out.println(res);
            }
        }

        return res;
    }
}
