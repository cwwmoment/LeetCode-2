/**
 * Created on 14 Dec 2018 by happygirlzt
 *
 * LeetCode #924. Minimize Malware Spread
 *
 */

class Solution {
    // Updated on 15 Apr 2019
    class DSU {
        int count;
        private int[] root;
        private int[] size;
        private int[] affected;
        public DSU(int n) {
            count = n;
            root = new int[n];
            affected = new int[n];
            for (int i = 0; i < n; i++) {
                root[i] = i;
            }

            size = new int[n];
        }

        public int find(int x) {
            if (root[x] != x) {
                root[x] = find(root[x]);
            }
            return root[x];
        }

        public void union(int x, int y) {
            int rootX = find(x);
            int rootY = find(y);
            if (rootX == rootY) return;

            if (size[rootX] < size[rootY]) {
                root[rootX] = rootY;
                size[rootY]++;
            } else {
                root[rootY] = rootX;
                size[rootX]++;
            }

            count--;
        }
    }

    public int minMalwareSpread(int[][] graph, int[] initial) {
        int n = graph.length;
        Arrays.sort(initial);
        DSU dsu = new DSU(n);

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (graph[i][j] == 1) {
                    dsu.union(i, j);
                }
            }
        }

        for (int i : initial) {
            int root = dsu.find(i);
            dsu.affected[root]++;
        }

        int res = -1;
        int num = 0;
        for (int i : initial) {
            int root = dsu.find(i);
            if (dsu.affected[root] == 1) {
                if (num < dsu.size[root]) {
                    num = dsu.size[root];
                    res = i;
                }
            }
        }

        return res == -1 ? initial[0] : res;
    }

    // 14 Dec 2018
    class DSU {
        int[] roots;
        int[] counts;

        public DSU(int n) {
            counts = new int[n];
            roots = new int[n];
            Arrays.fill(counts, 1);
            for (int i = 0; i < n; i++) {
                roots[i] = i;
            }
        }

        public int find(int i) {
            if (roots[i] != i) {
                roots[i] = find(roots[i]);
            }

            return roots[i];
        }

        public void union(int x, int y) {
            int rx = find(x), ry = find(y);
            if (rx == ry) return;
            roots[ry] = rx;
            counts[rx] += counts[ry];
        }

        public int size(int i) {
            // remember to find its root
            return counts[find(i)];
        }
    }

    public int minMalwareSpread(int[][] graph, int[] initial) {
        if (graph == null || graph.length == 0) return 0;
        int n = graph.length;

        DSU dsu = new DSU(n);
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (graph[i][j] == 1) {
                    dsu.union(i, j);
                }
            }
        }

        Arrays.sort(initial);

        Map<Integer, Integer> map = new HashMap<>();
        // save the total number of infected points in each set
        for (int i : initial) {
            int root = dsu.find(i);
            map.put(root, map.getOrDefault(root, 0) + 1);
        }

        // compare the size of the set
        int res = -1, maxSize = -1;
        for (int i : initial) {
            int root = dsu.find(i);
            int size = 0;

            // there is only one infected point
            if (map.get(root) == 1) {
                size = dsu.size(root);
            }

            if (size > maxSize) {
                res = i;
                maxSize = size;
            }
        }

        return res;
    }
}
